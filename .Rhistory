maptype = "roadmap",
zoom = 6,
markers = gc)
ggmap(map)
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 6,
markers = gc)
ggmap(map)
# 지도에 풍속을 원의 크기로 표시
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 6)
gmap <- ggmap(map)
gmap +
geom_point(data = df,
aes(x = lon, y = lat, size = spd),
alpha = 0.5, col = "blue") +
scale_size_continuous(range = c(1,14))
#단계 구분도
install.packages("ggiraphExtra")
library( ggiraphExtra)
dim(USArrests)
str
str(USArrests)
head(USArrests)
library(tibble)
crime <- rownames_to_column(USArrests, var = "state")
crime$state <- tolower(crime$state)
str(crime)
library(ggplot2)
install.packages("mappro")
install.packages("mapproj")
library(mapproj)
state_map <- map_data("state")
str(state_map)
ggChoropleth( ddata = crime,
aes( fill = Murder,
map_id = state),
map = state_map)
ggChoropleth( ddata = crime,
mapping = aes( fill = Murder,
map_id = state),
map = state_map)
ggChoropleth( data = crime,
mapping = aes( fill = Murder,
map_id = state),
map = state_map)
install.packages("devtools")
devtools::install_github("cardiomoon/kormaps2014")
devtools::install_github("cardiomoon/moonBook2")
library(kormaps2014)
library(moonBook2)
areacode
str(kormap1)
library(ggplot2)
theme_set(theme_gray(base_family="NanumGothic"))
ggplot(korpop1,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap1,colour="black",size=0.1)+
expand_limits(x=kormap1$long,y=kormap1$lat)+
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()
ggplot(korpop2,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap2,colour="black",size=0.1)+
expand_limits(x=kormap2$long,y=kormap2$lat)+          # expand_limits : 범위 : 경도 & 위도
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()                                           # 회전
st <- as.data.frame(stat.x77)
st <- as.data.frame(state.x77)
library(Rtsne)
library(ggplot2)
warnings()
str(st)
dup = which(duplicated(st))
dup = which(duplicated(st))
warnings()
dup = which(duplicated(st))
dup
st <- st[-dup,]
tsne <- Rtsne(st, dim = 2, perplexity = 10)
st <- as.data.frame(state.x77)
<<<<<<< HEAD
str(st)
library(Rtsne)
library(ggplot2)
dup = which(duplicated(st))
dup
st <- st[-dup,]
tsne <- Rtsne(st, dim = 2, perplexity = 10)
tsne <- Rtsne(st, dim = 2, perplexity = 3)
tsne <- Rtsne(st, dim = 2, perplexity = 1)
tsne <- Rtsne(st, dim = 2, perplexity = 0.5)
tsne <- Rtsne(st, dim = 2, perplexity = 0.1)
tsne <- Rtsne(st, dim = 2, perplexity = 0)
tsne <- Rtsne(st, dim = 2, perplexity = 0.000001)
tsne <- Rtsne(st, dim = 2, perplexity = 15)
dim(st)
tsne <- Rtsne(st, dim = 2, perplexity = 2)
st <- as.data.frame(state.x77)
str(st)
library(Rtsne)
library(ggplot2)
dup = which(duplicated(st))
dup
dim(st)
tsne <- Rtsne(st, dim = 2, perplexity = 15)
tsne
df.tens <- data.frame(tsne$Y)
head(df.tens)
ggplot(df.tens, aes(x = X1, y = X2, color = st)) +
geom_point(size = 2)
ggplot(df.tens, aes(x = X1, y = X2, color = TRUE )) +
geom_point(size = 2)
ggplot(df.tens, aes(x = X1, y = X2)) +
geom_point(size = 2)
tsne.1 <- Rtsne(st, dim = 3, perplexity = 15)
tsne.1
df.tens.1 <- data.frame(tsne.1$Y)
head(df.tens.1)
ggplot(df.tens.1, aes(x = X1, y = X2, z = X3)) +
geom_point(size = 2)
library(car)
library(rgl)
library(mgcv)
scatter3d(x = df.tsne.1$X1, y = df.tsne.1$X2, z = df.tens.1$X3)
scatter3d(x = df.tsne.1$X1, y = df.tsne.1$X2, z = df.tsne.1$X3)
scatter3d(x = df.tens.1$X1, y = df.tens.1$X2, z = df.tens.1$X3)
#문2)
#R에서 제공하는 swiss 데이터셋을 차원 축소하여 2차원 산점도와 3차원산점도를 작성하시오.
swiss
str(swiss)
dup1 <- which(duplicated(swiss))
dup1
dim(swiss)
sne <- Rtsne(swiss, dim = 2,perplexity = 15 )
sne
s <- data.frame(sne$Y)
ggplot(s, aes(x = X1, y = X2)) +
geom_point(size = 3)
ggplot(s, aes(x = X1, y = X2)) +
geom_point(size = 3)
warnings()
ggplot(s, aes(x = X1, y = X2)) +
geom_point(size = 3)
s <- data.frame(sne$Y)
ggplot(s, aes(x = X1, y = X2)) +
geom_point(size = 3)
detach("package:hrbrthemes", unload = TRUE)
ggplot(s, aes(x = X1, y = X2)) +
geom_point(size = 3)
detach("package:ggiraphExtra", unload = TRUE)
detach("package:plogr", unload = TRUE)
ggplot(s, aes(x = X1, y = X2)) +
geom_point(size = 3)
=======
(st)
rowSums(st)
#13. 인구가 5,000 이상인 주의 데이터만 출력
st.1 <- subset(st, Population >= 5000); st.1
#15. 수입이 4,500 이상인 주는 몇 개인지 출력
length(rownames(st.2))
#강사님 답안
nrow( subset( st, Income >= 4500 ) )    #nrow:수를 세는 함수
#다른 방법
mean(subset(st, Illiteracy >= 2.0)$ Income)
stt <- subset(st, Illiteracy >= 2.0)
stt
mean(stt$Income)
#6. Honda Civic의 연비(mpg)와 gear 수 출력
mtcars["Honda Civic",c("mpg","gear")]
install.packages(c("gapminder", "hrbrthemes", "plotly", "tidyverse", "treemap", "viridis"))
library(tidyverse)
rain <- c(55,50,45,50,60,70)
df <- data.frame(month, rain)
df
month <- c(1,2,3,4,5,6)
rain <- c(55,50,45,50,60,70)
df <- data.frame(month, rain)
df
data("mtcars")
mt <- data.frame(mtcars)
ggplot(data = mt) +
geom_bar(mapping =aes(x = cyl), fill = "green" )
ggplot(data = mt) +
geom_bar(mapping =aes(x = cyl, fill = "green") )
str(mt)
cyl.1 <- as.factor(mt$cyl)
ggplot(data = mt, mapping = aes(y = mpg, fill = cyl.1, position = "dodge")) +
geom_boxplot()
ggplot(data = mt) +
geom_bar(mapping =aes(x = cyl), fill = "green" )
ggplot(data = mt, mapping = aes(y = mpg), fill = cyl.1, position = "dodge") +
geom_boxplot()
ggplot(data = mt, mapping = aes(y = mpg, fill = cyl.1, position = "dodge")) +
geom_boxplot()
ggplot(data = mt, aes(x = cyl, fill = "green")) + geom_bar()
ggplot(data = mt, aes(x = cyl), fill = "green") + geom_bar()
ggplot(data = mt, aes(x = cyl, fill = "green")) + geom_bar()
ggplot(data = mt, aes(x = cyl, fill = "blue")) + geom_bar()
ggplot(data = mt, mapping = aes(x = cyl, fill = "blue")) + geom_bar()
ggplot(data = mt, mapping = aes(x = cyl), fill = "blue") + geom_bar()
ggplot(data = mt, mapping = aes(x = cyl), color = "blue") + geom_bar()
ggplot(data = mt, mapping = aes(x = cyl, color = "blue")) + geom_bar()
ggplot(data = mt, mapping = aes(x = cyl, fill = "blue")) + geom_bar()
ggplot(data = mt) +
geom_bar(mapping =aes(x = cyl), fill = "green" )
ggplot(data = mt) +
geom_bar(mapping =aes(x = cyl), fill = "blue" )
ggplot(data = mt) +
geom_histogram(mapping = aes(x = mpg ), binwidth = 5.0)
ggplot(data = mt) +
geom_histogram(mapping = aes(x = mpg , binwidth = 5.0))
)
ggplot(data = mt) +
geom_histogram(mapping = aes(x = mpg ), binwidth = 5.0)
ggplot(mt, aes(x = mpg, binwidth = 5.0)) + geom_histogram()
ggplot(data = mt) +
geom_bar(mapping =aes(x = cyl), fill = "green" )
#!!!! 문3) !!!!
#R에서 제공하는 mtcars 데이터셋에서 mpg(연비)에 대해 구간 간격이 5.0인 히스토그램을 ggplot으로 작성하시오.
ggplot(data = mt) +
geom_histogram(mapping = aes(x = mpg ), binwidth = 5.0)
#!!!! 문3) !!!!
#R에서 제공하는 mtcars 데이터셋에서 mpg(연비)에 대해 구간 간격이 5.0인 히스토그램을 ggplot으로 작성하시오.
ggplot(data = mt) +
geom_histogram(mapping = aes(x = mpg ), binwidth = 5.0)
ggplot(mt, aes(x = mpg)) + geom_histogram(binwidth = 5.0)
ggplot(iris, aes(x = Petal.Length)) + geom_histogram(binwidth = 0.5)    #binwidth는 y값의 count(한 블록) 기준. / 즉, 꽃잎의 단위를 0.5단위로 계산해라.
#수정
ggplot(mt, aes(x = mpg, binwidth = 5.0)) + geom_histogram()
mt$mpg
ggplot(mt, aes(x = mpg)) + geom_histogram(binwidth = 5.0)
ggplot(mt, aes(x = mpg)) + geom_histogram()
ggplot(mt, aes(x = mpg)) + geom_histogram(bins = 30)
ggplot(mt, aes(x = mpg)) + geom_histogram(bins = 5.0)
ggplot(iris, aes(x = Petal.Length)) + geom_histogram(binwidth = 0.5)    #binwidth는 y값의 count(한 블록) 기준. / 즉, 꽃잎의 단위를 0.5단위로 계산해라.
ggplot(mt, aes(x = mpg)) + geom_histogram(bins = 5.0)
ggplot(iris, aes(x = Petal.Length)) + geom_histogram(bins = 0.5)    #binwidth는 y값의 count(한 블록) 기준. / 즉, 꽃잎의 단위를 0.5단위로 계산해라.
ggplot(iris, aes(x = Petal.Length)) + geom_histogram(bins = 0.5)    #binwidth는 y값의 count(한 블록) 기준. / 즉, 꽃잎의 단위를 0.5단위로 계산해라.
ggplot(mt, aes(x = mpg)) + geom_histogram(binwidth  = 5.0)
#수정
ggplot(mt, aes(x = mpg, binwidth = 5.0)) + geom_histogram()
mt$mpg
ggplot(mt, aes(x = mpg)) + geom_histogram(binwidth  = 5.0)
#수정 - 둘중 pick.
ggplot(mt, aes(x = mpg, binwidth = 5.0)) + geom_histogram()
ggplot(mt, aes(x = mpg)) + geom_histogram(binwidth  = 5.0)
ggplot(data = trees) +
geom_histogram(mapping = aes(x = Girth), binwidth = 3.0, fill = "steelblue") +
labs(x = "나무 둘레", y = "빈도수")
ggplot(data = trees) +
geom_histogram(mapping = aes(x = Girth, binwidth = 3.0, fill = "steelblue")) +
labs(x = "나무 둘레", y = "빈도수")
ggplot(trees, aes(x = Girth)) + geom_histogram(binwidth = 3, fill = "steelblue")
ggplot(iris, aes(x = Sepal.Width, fill = Species, color = Species)) +   #색을 품종별로 지정.(fill = 품종 <- 막대 색. color = 막대 경계선
geom_histogram(binwidth = 0.5, position = "dodge") +                  #position = 막대를 어떻게 넣을지. 여기서는 막대를 품종별로 각각 그려라.
theme( legend.position = "top")
ggplot(iris, aes(x = Sepal.Width, fill = Species, color = Species)) +   #색을 품종별로 지정.(fill = 품종 <- 막대 색. color = 막대 경계선
geom_histogram(binwidth = 0.5) +                  #position = 막대를 어떻게 넣을지. 여기서는 막대를 품종별로 각각 그려라.
theme( legend.position = "top")                                       #그래프 테마, 위에다가 넣어라.// theme은 다르게 분리해 놓면 좋다.
, position = "dodge"
ggplot(iris, aes(x = Sepal.Width, fill = Species, color = Species)) +   #색을 품종별로 지정.(fill = 품종 <- 막대 색. color = 막대 경계선
geom_histogram(binwidth = 0.5, position = "dodge") +                  #position = 막대를 어떻게 넣을지. 여기서는 막대를 품종별로 각각 그려라.
theme( legend.position = "top")                                       #그래프 테마, 위에다가 넣어라.// theme은 다르게 분리해 놓면 좋다.
# ggplot2 Scatter Chart
ggplot(data = iris, mapping = aes(x = Petal.Length, y = Petal.Width)) + geom_point()    #geom에 아무것도 넣지 않으면 기본판이 나온다(점, 격자판)
ggplot(data = iris) + geom_point(mapping = aes(x = Petal.Length, y = Petal.Width))      #위에 것과 같은데 방식차이.
#즉 꼭 필요한것은 data, mapping(x와 y)은 제일 기본 정보.
# - 업그레이드 버전
ggplot(data = iris, mapping = aes(x = Petal.Length, y = Petal.Width, color = Species, shape = Species)) + geom_point( size = 3) +  #점모양,점 크기
ggtitle("꽃잎의 길이와 폭") +
theme(plot.title = element_text(size = 25, face = "bold", color = "red"))
ggplot(data = iris, mapping = aes(y = Petal.Length, fill = Species)) + geom_boxplot()   #종류별로 box그리기
year <- 1937 : 1960
cnt <- as.vector(airmiles)
df <- data.frame(year, cnt)
df
head(df)
ggplot(df, aes(x = year, y = cnt)) + geom_line(col = "red")
ggplot(economics, aes(x = date, y = psavert)) +
geom_line() +
geom_abline(intercept = 12.18671, slope = -0.0005444)
ggplot(economics, aes(x = date, y = psavert)) +
geom_line() +
geom_hline(yintercept = mean(economics$psavert))
psavert == min(economics$psavert))$date
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +                                                                                  # annotate는 지정범위 정하기. rect는 범위모양(네모)
annotate( "rect", xmin = 3, xmax = 4, ymin = 12, ymax = 21, alpha = 0.5, fill = "skyblue") +    # alpha는 투명도 조절 :  0.1 ~ 1 사이 . 1에 가까울수록 불투명
annotate("segment", x = 2.5, xend = 3.7, y = 10, yend = 17, color = "red", arrow = arrow()) +   # 화살표 지정하기 (화살표 길이 정하기)
annotate("text", x = 2.5, y = 10, label = "point")                                              #내용 입력하기. 글 추가
# annotate는 개별로 layer넣기.
>>>>>>> c513deaf944062ac12c0bec53f42fdec23f15d1c
st <- as.data.frame(state.x77)
str(st)
library(Rtsne)
library(ggplot2)
dup = which(duplicated(st))
dup
dim(st)
tsne <- Rtsne(st, dim = 2, perplexity = 15)
tsne
df.tens <- data.frame(tsne$Y)
head(df.tens)
ggplot(df.tens, aes(x = X1, y = X2)) +
geom_point(size = 2)
ggplot( df.tsne, aes( x = X1, y = X2 ) ) +
geom_point( size=2, color = 'red' )
ds <- data.frame( state.x77 )
## 중복 데이터 삭제 ( t-SNE에서는 중복데이터가 없어야 한다. )
dup = which( duplicated( ds ) )
dup
## Run t-SNE : 2D
tsne <- Rtsne( ds, dims = 2, perplexity = 10 )
df.tsne <- data.frame( tsne$Y )
ggplot( df.tsne, aes( x = X1, y = X2 ) ) +
geom_point( size=2, color = 'red' )
ggplot(df.tens, aes(x = X1, y = X2)) +
geom_point(size = 2)
library(car)
library(rgl)
library(mgcv)
tsne.1 <- Rtsne(st, dims = 3, perplexity = 15)
tsne.1
df.tens.1 <- data.frame(tsne.1$Y)
head(df.tens.1)
scatter3d(x = df.tens.1$X1, y = df.tens.1$X2, z = df.tens.1$X3)
tsne <- Rtsne( ds, dims = 3, perplexity = 10 )
df.tsne <- data.frame( tsne$Y )
head( df.tsne )
scatter3d( x = df.tsne$X1,
y = df.tsne$X2,
z = df.tsne$X3,
surface = FALSE )
tsne.1 <- Rtsne(st, dims = 3, perplexity = 15)
tsne.1
df.tens.1 <- data.frame(tsne.1$Y)
head(df.tens.1)
scatter3d(x = df.tens.1$X1, y = df.tens.1$X2, z = df.tens.1$X3)
scatter3d(x = df.tens.1$X1, y = df.tens.1$X2, z = df.tens.1$X3, surface = F)
swiss
str(swiss)
dim(swiss)
dup1 <- which(duplicated(swiss))
dup1
dup1 <- which(duplicated(swiss))
sne <- Rtsne(swiss, dim = 2,perplexity = 15 )
s <- data.frame(sne$Y)
ggplot(s, aes(x = X1, y = X2)) +
geom_point(size = 3)
ds <- swiss
dup = which( duplicated( ds ) )
dup
tsne <- Rtsne( ds, dims = 2, perplexity = 10 )
df.tsne <- data.frame( tsne$Y )
ggplot( df.tsne, aes( x = X1, y = X2 ) ) +
geom_point( size = 2, color = 'red' )
dup1 <- which(duplicated(swiss))
sne <- Rtsne(swiss, dim = 2,perplexity = 15 )
s <- data.frame(sne$Y)
ggplot(s, aes(x = X1, y = X2)) +
geom_point(size = 3)
sne.1 <- Rtsne(swiss, dims = 3, perplexity = 15)
s.1 <- data.frame(sne.1$Y)
scatter3d(x = s.1$X1, y = s.1$X2, z = s.1$X3)
tsne <- Rtsne( ds, dims = 3, perplexity = 10 )
df.tsne <- data.frame( tsne$Y )
head( df.tsne )
scatter3d( x = df.tsne$X1,
y = df.tsne$X2,
z = df.tsne$X3,
surface = FALSE )
library(ggmap)
register_google(key = "AIzaSyDlnUhm-Llf-JUjfPpyNG6yEkeZDwoiAi4")
gc <- geocode(enc2utf8("서울시청"))
gc
cen <- as.numeric(gc)
map <- get_googlemap(center = cen, zoom = 10, size = c(600, 600), maptype = "roadmap")
ggmap(map)
gc.10 <- geocode(enc2utf8(c("강서구청", "영등포구청", "양천구청","구로구청", "동작구청", "서초구청", "강남구청", "송파구청", "강동구청", "금천구청")))
names = c("강서구청", "영등포구청", "양천구청","구로구청", "동작구청", "서초구청", "강남구청", "송파구청", "강동구청", "금천구청")
df <- data.frame(name = names, lon = gc.10$lon, lat = gc.10$lat)
df
cen.10 <- c(mean(df$lon), mean(df$lat))
map.10 <-  get_googlemap(center = cen.10, maptype = "roadmap", zoom = 11, size = c(640, 640) , markers = gc.10)
gmap <- ggmap(map.10)
gmap +
geom_text(data = df, aes(x = lon, y = lat), size = 5, label = df$name)
office.name <- c( '강남구청', '강동구청', '강서구청', '관악구청', '구로구청',
'금천구청', '동작구청', '서초구청', '송파구청', '양천구청', '영등포구청' )
gc <- geocode( enc2utf8( office.name ) )
gc
cen <- colMeans( as.matrix( gc ) )
map <- get_googlemap( center = cen,
size = c( 640, 640 ),
zoom = 11,
markers = gc,
maptype = 'roadmap' )
gmap <- ggmap( map )
gmap +
geom_text( data = data.frame( gc ),
aes( x = lon, y = lat ),
size = 3,
label = office.name )
office.name <- c( '광주광역시', '부산광역시', '인천광역시', '대구광역시',
'울산광역시', '대전광역시' )
gc <- geocode( enc2utf8( office.name ) )
gc
cen <- colMeans( as.matrix( gc ) )
map <- get_googlemap( center = cen,
size = c( 640, 640 ),
zoom = 7,
markers = gc,
maptype = 'roadmap')
gmap <- ggmap( map )
gmap +
geom_text( data = data.frame( gc ),
aes( x = lon,y = lat ),
size = 3,
label = office.name )
gc.11 <- geocode(enc2utf8(c("인천광역시", " 대전광역시", "부산광역시", "울산광역시","대구광역시", "광주광역시")))
names <- c("인천광역시", " 대전광역시", "부산광역시", "울산광역시","대구광역시", "광주광역시")
df.2 <- data.frame(name = names, lon = gc.11$lon, lat = gc.11$lat)
df.2
cen.11 <- c(mean(df.2$lon), mean(df.2$lat))
map.11 <- get_googlemap(center = cen.11, maptype = "roadmap", zoom = 7, size = c(640,640), markers = gc.11)
gmap.2 <- ggmap(map.11)
gmap.2 +
geom_text(data = df.2, aes(x = lon, y = lat), size = 5, label = df.2$name)
gc.12 <- geocode(enc2utf8(c("설악산 국립공원","오대산국립공원","북한산국립공원","치악산국립공원")))
names <- c("설악산 국립공원","오대산국립공원","북한산국립공원","치악산국립공원")
df.3 <- data.frame(name = names, lon = gc.12$lon, lat = gc.12$lat)
df.3
cen.12 <- c(mean(df.3$lon), mean(df.3$lat))
map.12 <- get_googlemap(center = cen.12, maptype = "roadmap", zoom = 7, size = c(640,640), markers = gc.12 )
gmap.3 <- ggmap(map.12)
gmap.3 +
geom_text(data = df.3, aes(x = lon, y = lat), size = 5, label = df.3$name)
park.name <- c( '북한산', '설악산', '치악산', '오대산','태백산' )
gc <- geocode( enc2utf8( park.name ) )
gc
cen <- colMeans( as.matrix( gc ) )
map <- get_googlemap( center = cen,
size = c( 640, 640 ),
zoom = 8,
markers = gc,
maptype = 'roadmap' )
gmap <- ggmap( map )
gmap +
geom_text( data = data.frame( gc ),
aes( x = lon, y = lat ),
size = 3,
label = park.name )
ds.tot <- read.csv( '도로교통공단_시도_시군구별_월별_교통사고(2018).csv' )
s.tot <- read.csv( '도로교통공단_시도_시군구별_월별_교통사고(2018).csv' )
ds.seoul <- subset( ds.tot, 시도 == '서울' )
ds.year <- aggregate( ds.seoul[ , '발생건수' ],
by = list( 시군구 = ds.seoul$시군구 ), FUN = sum )
ds.year
gc <- geocode( enc2utf8( as.vector( ds.year$시군구 ) ) )
gc
cen <- colMeans( as.matrix( gc ) )
map <- get_googlemap( center = cen,
size = c( 640, 640 ),
zoom = 11,
maptype = 'roadmap' )
gmap <- ggmap(map)
gmap +
geom_point( data = data.frame(gc),
aes( x = lon, y = lat, size = ds.year$x ),
alpha = 0.5,
col = "red" ) +
scale_size_continuous( range = c(1, 14 ) )
car <- read.csv("도로교통공단_시도_시군구별_월별_교통사고(2018).csv")
car <- data.frame(car)
car <- car[,-3]
car_sum <- car %>%  filter (시도 == '서울') %>% group_by(시군구) %>% summarise(sum(발생건수))
city <- car %>% filter(시도 == '서울') %>% group_by(시군구)
city_names <- as.vector(city$시군구)
city_names <- unique(city_names)
city_names <- as.vector(city_names)
gc.car <- geocode(enc2utf8(city_names))
df.car <- data.frame(name = city_names, lon = gc.car$lon, lat = gc.car$lat)
car_sum <- as.data.frame(car_sum)
colnames(car_sum) <- c("name", "sum")
df.car <- left_join(df.car, car_sum, by = 'name')
cen.car <- c(mean(df.car$lon), mean(df.car$lat))
map.car <- get_googlemap(center = cen.car, maptype = "roadmap", zoom = 11, markers = gc.car)
gmap.car <- ggmap(map.car)
gmap.car +
geom_point(data = df.car, aes(x = lon, y = lat, size = sum, alpha = 0.3), col = "blue") +
scale_size_continuous(range = c(1,16))
ds.jeju <- subset( ds.tot, 시도 == '제주' )
ds.year <- aggregate( ds.jeju[ , '발생건수' ],
by = list( 시군구 = ds.jeju$시군구 ), FUN = sum )
ds.year
gc <- geocode( enc2utf8( as.vector( ds.year$시군구 ) ) )
gc
cen <- colMeans( as.matrix( gc ) )
map <- get_googlemap( center = cen,
size = c( 640, 640 ),
zoom = 11,
maptype = 'roadmap' )
gmap <- ggmap(map)
gmap +
geom_point( data = data.frame(gc),
aes( x = lon, y = lat, size = ds.year$x ),
alpha = 0.5,
col = "red" ) +
scale_size_continuous( range = c(1, 14 ) )
