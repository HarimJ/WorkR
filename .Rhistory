m <- c(10,40,60,20)
f <- c(21,60,70,30)
score <- data.frame(m,f)
score
score <- matrix(c(10,40,60,20,21,60,70,30), nrow = 4, ncol = 2);    score
colnames(score) <- c("m","f");                                      score
#1. state.x77을 변환하여 st에 data frame으로 작성
st <- data.frame(state.x77)
#3. st의 열 이름 출력
colnames( st )
names( st )
#3. st의 열 이름 출력
variable.names(st)
nrow( st )
ncol( st )
dim( st )
rowSums( st )
apply( st, 1, sum )
rowMeans( st )
apply( st, 1, mean )
apply(st[1:50,],1, sum)
apply(st[1:50, ],1, mean)
#13. 인구가 5,000 이상인 주의 데이터만 출력
subset( st, Population >= 5000 )
#13. 인구가 5,000 이상인 주의 데이터만 출력
st.1 <- subset(st, Population > 5000)
st.1
#20. 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력
max.life <- max( st$Life.Exp )
rownames( subset( st, Life.Exp == max.life ) )
#******20. 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력
max.lif <- max(st$`Life Exp`)
#******20. 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력
max.life <- max(st$`Life Exp`)
#******20. 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력
max.life <- max(st$`Life Exp`)
#20. 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력
max.life <- max( st$Life.Exp )
#******20. 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력
max.life <- max(st$Life Exp)
#1. state.x77을 변환하여 st에 data frame으로 작성
st <- as.data.frame(state.x77)
#******20. 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력
max.life <- max(st$Life Exp)
#******20. 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력
max.life <- max(st$`Life Exp`)
## 강사님 답안
rownames( subset( st, Life.Exp == max.life ) )
## 강사님 답안
rownames( subset( st, `Life Exp` == max.life ) )
#1. 이 데이터셋의 자료구조 출력
class( mtcars )
기대수명(Life Exp)이 가장 높은 주는 어디인지 출력
max.life <- max( st$Life.Exp )
rownames( subset( st, Life.Exp == max.life ) )
#1. 이 데이터셋의 자료구조 출력
str(mtcars)
#1. 이 데이터셋의 자료구조 출력
class( mtcars )
#3. 이 데이터셋 열들의 자료형 출력
str( mtcars )
#3. 이 데이터셋 열들의 자료형 출력
str(ncol(mtcars))
rownames( subset( mtcars, mpg == max.mpg ) )
#*****4. 연비(mpg)가 가장 좋은 자동차 모델 출력
max.mpg <- max(mtcars$mpg); max.mpg
rownames( subset( mtcars, mpg == max.mpg ) )
#****5. gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
u <- subset(mtcars, gear == 4); u
v <- min(u$mpg); v
rownames(subset(u, mpg == v))
# the answer
unique(mtcars$gear)
#9. gear의 수 종류 출력
table(mtcars[,"gear"])
#the anwser
class( airquality )
#the anser
names(st)
colnames(st)
#7. st의 행별 합계와 평균 출력
apply(st[1:50,],1, sum)
rowsum(st)
#1. state.x77을 변환하여 st에 data frame으로 작성
st <- as.data.frame(state.x77)
rowsum(st)
#1. state.x77을 변환하여 st에 data frame으로 작성
st <- as.data.frame(state.x77)
(st)
rowSums(st)
#13. 인구가 5,000 이상인 주의 데이터만 출력
st.1 <- subset(st, Population >= 5000); st.1
#15. 수입이 4,500 이상인 주는 몇 개인지 출력
length(rownames(st.2))
#강사님 답안
nrow( subset( st, Income >= 4500 ) )    #nrow:수를 세는 함수
#다른 방법
mean(subset(st, Illiteracy >= 2.0)$ Income)
stt <- subset(st, Illiteracy >= 2.0)
stt
mean(stt$Income)
#6. Honda Civic의 연비(mpg)와 gear 수 출력
mtcars["Honda Civic",c("mpg","gear")]
install.packages(c("gapminder", "hrbrthemes", "plotly", "tidyverse", "treemap", "viridis"))
library(tidyverse)
rain <- c(55,50,45,50,60,70)
df <- data.frame(month, rain)
df
month <- c(1,2,3,4,5,6)
rain <- c(55,50,45,50,60,70)
df <- data.frame(month, rain)
df
data("mtcars")
mt <- data.frame(mtcars)
ggplot(data = mt) +
geom_bar(mapping =aes(x = cyl), fill = "green" )
ggplot(data = mt) +
geom_bar(mapping =aes(x = cyl, fill = "green") )
str(mt)
cyl.1 <- as.factor(mt$cyl)
ggplot(data = mt, mapping = aes(y = mpg, fill = cyl.1, position = "dodge")) +
geom_boxplot()
ggplot(data = mt) +
geom_bar(mapping =aes(x = cyl), fill = "green" )
ggplot(data = mt, mapping = aes(y = mpg), fill = cyl.1, position = "dodge") +
geom_boxplot()
ggplot(data = mt, mapping = aes(y = mpg, fill = cyl.1, position = "dodge")) +
geom_boxplot()
ggplot(data = mt, aes(x = cyl, fill = "green")) + geom_bar()
ggplot(data = mt, aes(x = cyl), fill = "green") + geom_bar()
ggplot(data = mt, aes(x = cyl, fill = "green")) + geom_bar()
ggplot(data = mt, aes(x = cyl, fill = "blue")) + geom_bar()
ggplot(data = mt, mapping = aes(x = cyl, fill = "blue")) + geom_bar()
ggplot(data = mt, mapping = aes(x = cyl), fill = "blue") + geom_bar()
ggplot(data = mt, mapping = aes(x = cyl), color = "blue") + geom_bar()
ggplot(data = mt, mapping = aes(x = cyl, color = "blue")) + geom_bar()
ggplot(data = mt, mapping = aes(x = cyl, fill = "blue")) + geom_bar()
ggplot(data = mt) +
geom_bar(mapping =aes(x = cyl), fill = "green" )
ggplot(data = mt) +
geom_bar(mapping =aes(x = cyl), fill = "blue" )
ggplot(data = mt) +
geom_histogram(mapping = aes(x = mpg ), binwidth = 5.0)
ggplot(data = mt) +
geom_histogram(mapping = aes(x = mpg , binwidth = 5.0))
)
ggplot(data = mt) +
geom_histogram(mapping = aes(x = mpg ), binwidth = 5.0)
ggplot(mt, aes(x = mpg, binwidth = 5.0)) + geom_histogram()
ggplot(data = mt) +
geom_bar(mapping =aes(x = cyl), fill = "green" )
#!!!! 문3) !!!!
#R에서 제공하는 mtcars 데이터셋에서 mpg(연비)에 대해 구간 간격이 5.0인 히스토그램을 ggplot으로 작성하시오.
ggplot(data = mt) +
geom_histogram(mapping = aes(x = mpg ), binwidth = 5.0)
#!!!! 문3) !!!!
#R에서 제공하는 mtcars 데이터셋에서 mpg(연비)에 대해 구간 간격이 5.0인 히스토그램을 ggplot으로 작성하시오.
ggplot(data = mt) +
geom_histogram(mapping = aes(x = mpg ), binwidth = 5.0)
ggplot(mt, aes(x = mpg)) + geom_histogram(binwidth = 5.0)
ggplot(iris, aes(x = Petal.Length)) + geom_histogram(binwidth = 0.5)    #binwidth는 y값의 count(한 블록) 기준. / 즉, 꽃잎의 단위를 0.5단위로 계산해라.
#수정
ggplot(mt, aes(x = mpg, binwidth = 5.0)) + geom_histogram()
mt$mpg
ggplot(mt, aes(x = mpg)) + geom_histogram(binwidth = 5.0)
ggplot(mt, aes(x = mpg)) + geom_histogram()
ggplot(mt, aes(x = mpg)) + geom_histogram(bins = 30)
ggplot(mt, aes(x = mpg)) + geom_histogram(bins = 5.0)
ggplot(iris, aes(x = Petal.Length)) + geom_histogram(binwidth = 0.5)    #binwidth는 y값의 count(한 블록) 기준. / 즉, 꽃잎의 단위를 0.5단위로 계산해라.
ggplot(mt, aes(x = mpg)) + geom_histogram(bins = 5.0)
ggplot(iris, aes(x = Petal.Length)) + geom_histogram(bins = 0.5)    #binwidth는 y값의 count(한 블록) 기준. / 즉, 꽃잎의 단위를 0.5단위로 계산해라.
ggplot(iris, aes(x = Petal.Length)) + geom_histogram(bins = 0.5)    #binwidth는 y값의 count(한 블록) 기준. / 즉, 꽃잎의 단위를 0.5단위로 계산해라.
ggplot(mt, aes(x = mpg)) + geom_histogram(binwidth  = 5.0)
#수정
ggplot(mt, aes(x = mpg, binwidth = 5.0)) + geom_histogram()
mt$mpg
ggplot(mt, aes(x = mpg)) + geom_histogram(binwidth  = 5.0)
#수정 - 둘중 pick.
ggplot(mt, aes(x = mpg, binwidth = 5.0)) + geom_histogram()
ggplot(mt, aes(x = mpg)) + geom_histogram(binwidth  = 5.0)
ggplot(data = trees) +
geom_histogram(mapping = aes(x = Girth), binwidth = 3.0, fill = "steelblue") +
labs(x = "나무 둘레", y = "빈도수")
ggplot(data = trees) +
geom_histogram(mapping = aes(x = Girth, binwidth = 3.0, fill = "steelblue")) +
labs(x = "나무 둘레", y = "빈도수")
ggplot(trees, aes(x = Girth)) + geom_histogram(binwidth = 3, fill = "steelblue")
ggplot(iris, aes(x = Sepal.Width, fill = Species, color = Species)) +   #색을 품종별로 지정.(fill = 품종 <- 막대 색. color = 막대 경계선
geom_histogram(binwidth = 0.5, position = "dodge") +                  #position = 막대를 어떻게 넣을지. 여기서는 막대를 품종별로 각각 그려라.
theme( legend.position = "top")
ggplot(iris, aes(x = Sepal.Width, fill = Species, color = Species)) +   #색을 품종별로 지정.(fill = 품종 <- 막대 색. color = 막대 경계선
geom_histogram(binwidth = 0.5) +                  #position = 막대를 어떻게 넣을지. 여기서는 막대를 품종별로 각각 그려라.
theme( legend.position = "top")                                       #그래프 테마, 위에다가 넣어라.// theme은 다르게 분리해 놓면 좋다.
, position = "dodge"
ggplot(iris, aes(x = Sepal.Width, fill = Species, color = Species)) +   #색을 품종별로 지정.(fill = 품종 <- 막대 색. color = 막대 경계선
geom_histogram(binwidth = 0.5, position = "dodge") +                  #position = 막대를 어떻게 넣을지. 여기서는 막대를 품종별로 각각 그려라.
theme( legend.position = "top")                                       #그래프 테마, 위에다가 넣어라.// theme은 다르게 분리해 놓면 좋다.
# ggplot2 Scatter Chart
ggplot(data = iris, mapping = aes(x = Petal.Length, y = Petal.Width)) + geom_point()    #geom에 아무것도 넣지 않으면 기본판이 나온다(점, 격자판)
ggplot(data = iris) + geom_point(mapping = aes(x = Petal.Length, y = Petal.Width))      #위에 것과 같은데 방식차이.
#즉 꼭 필요한것은 data, mapping(x와 y)은 제일 기본 정보.
# - 업그레이드 버전
ggplot(data = iris, mapping = aes(x = Petal.Length, y = Petal.Width, color = Species, shape = Species)) + geom_point( size = 3) +  #점모양,점 크기
ggtitle("꽃잎의 길이와 폭") +
theme(plot.title = element_text(size = 25, face = "bold", color = "red"))
ggplot(data = iris, mapping = aes(y = Petal.Length, fill = Species)) + geom_boxplot()   #종류별로 box그리기
year <- 1937 : 1960
cnt <- as.vector(airmiles)
df <- data.frame(year, cnt)
df
head(df)
ggplot(df, aes(x = year, y = cnt)) + geom_line(col = "red")
ggplot(economics, aes(x = date, y = psavert)) +
geom_line() +
geom_abline(intercept = 12.18671, slope = -0.0005444)
ggplot(economics, aes(x = date, y = psavert)) +
geom_line() +
geom_hline(yintercept = mean(economics$psavert))
psavert == min(economics$psavert))$date
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +                                                                                  # annotate는 지정범위 정하기. rect는 범위모양(네모)
annotate( "rect", xmin = 3, xmax = 4, ymin = 12, ymax = 21, alpha = 0.5, fill = "skyblue") +    # alpha는 투명도 조절 :  0.1 ~ 1 사이 . 1에 가까울수록 불투명
annotate("segment", x = 2.5, xend = 3.7, y = 10, yend = 17, color = "red", arrow = arrow()) +   # 화살표 지정하기 (화살표 길이 정하기)
annotate("text", x = 2.5, y = 10, label = "point")                                              #내용 입력하기. 글 추가
# annotate는 개별로 layer넣기.
